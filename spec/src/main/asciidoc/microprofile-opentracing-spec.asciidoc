//
// Copyright (c) 2017 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Steve Fontes

= Microprofile OpenTracing
:author: Steve Fontes
:email: steve.m.fontes@gmail.com
:revnumber: 0.2
:revdate: 2017-10-4
:revremark: Specification
:version-label!:
:sectanchors:
:doctype: book
:license: Apache License v2.0
:source-highlighter: coderay
:toc: left
:toclevels: 4
:sectnumlevels: 4
ifdef::backend-pdf[]
:pagenums:
endif::[]

[subs="normal"]
....

Specification: {doctitle}

Version: {revnumber}

Status: {revremark}

Release: {revdate}

Copyright (c) 2017 Eclipse Microprofile Contributors:
Steve Fontes

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

....

= Microprofile OpenTracing

## Introduction

Distributed tracing allows you to trace the flow of a request across service boundaries. This is particularly important in a microservices environment where a request typically flows through multiple services. To accomplish distributed tracing, each service must be instrumented to log messages with a correlation id that may have been propagated from an upstream service. A common companion to distributed trace logging is a service where the distributed trace records can be stored. ([Examples](http://opentracing.io/documentation/pages/supported-tracers.html)).
The storage service for distributed trace records can provide features to view the cross service trace records associated with particular request flows.

It will be useful for services written in the microprofile.io framework to be able to integrate well with a distributed trace system that is part of the larger microservices environment. This proposal defines an API and microprofile.io behaviors that allow services to easily participate in an environment where distributed tracing is enabled.

This proposal specifically addresses the problem of making it easy to instrument services with distributed tracing function, given an existing distributed tracing system in the environment.

This proposal specifically does not address the problem of defining, implementing, or configuring the underlying distributed tracing system. The proposal assumes an environment where all services use a common opentracing.io implementation (all zipkin compatible, all jaeger compatible, ...).

The information about a Span that is propagated between services is typically called a SpanContext. It is not the intent of this specification to define the exact format for how SpanContext information is stored or propagated. Our use case is for applications running in an environment where all applications use the same Tracer implementation, and microservices that require explicit tracing logic use the opentracing API. Work on defining common formats for SpanContexts and implementations that use the common format is being done at [open-census] (https://github.com/census-instrumentation/opencensus-java). The open-census API appears very similar to opentracing, but support for open-census Tracers will probably require a separate microprofile.io specification.

## Rationale

In order for a distributed tracing system to be effective and usable, two things are required

1. The different services in the environment must agree on the mechanism for transferring correlation ids across services.

2. The different services in the environment should produce their trace records in format that is consumable by the storage service for distributed trace records.

Without the first, some services will not be included in the trace records associated with a request. Without the second, custom code would need to be written to present the information about a full request flow.

There are existing distributed tracing systems that provide a server for distributed trace record storage and viewing, and application libraries for instrumenting microservices. The problem is that the different distributed tracing systems use implementation specific mechanisms for propagating correlation IDs and for formatting trace records, so once a microservice chooses a distributed tracing implementation library to use for its instrumentation, all other microservices in the environment are locked into the same choice.

The [opentracing.io project's](http://opentracing.io/) purpose is to provide a standard API for instrumenting microservices for distributed tracing. If every microservice is instrumented for distributed tracing using the opentracing.io API, then (as long as an implementation library exists for the microservice's language), the microservice can be configured at deploy time to use a common system implementation to perform the log record formatting and cross service correlation id propagation. The common implementation ensures that correlation ids are propagated in a way that is understandable to all services, and log records are formatted in a way that is understandable to the server for distributed trace record storage.

In order to make microprofile.io distributed tracing friendly, it will be useful to allow distributed tracing to be enabled on any microprofile.io application, without having to explicitly add distributed tracing code to the application.

In order to make microprofile.io as flexible as possible for adding distributed trace log records, microprofile.io should expose whatever objects are necessary for an application to use the opentracing.io API.

//
// Copyright (c) 2017 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Steve Fontes

== Proposed Solution

This specification defines an easy way to allow an application running in a
microprofile.io container to take advantage of distributed tracing by using an
opentracing.io Tracer implementation.

=== Enabling distributed tracing with no code instrumentation

The microprofile.io implementation will allow JAX-RS applications to participate in distributed tracing, without requiring developers to add any distributed tracing code into their applications, and without requiring developers to know anything about the distributed tracing environment that their JAX-RS application will be deployed into.

1. The microprofile.io implementation must provide a mechanism to configure an io.opentracing.Tracer implementation for use by each JAX-RS application.
2. The microprofile.io implementation must provide a mechanism to automatically extract SpanContext information from any incoming JAX-RS request.
3. The microprofile.io implementation must provide a mechanism to automatically start a Span for any incoming JAX-RS request.
4. The microprofile.io implementation must provide a mechanism to automatically inject SpanContext information into any outgoing JAX-RS request.
5. The microprofile.io implementation must provide a mechanism to automatically start a Span for any outgoing JAX-RS request.

All automatically created Spans must have the correct parent/child relationships when creating either synchronous or asynchronous JAX-RS incoming and outgoing requests.

==== Tracer configuration
An implementation of an io.opentracing.Tracer must be made available to each application. Each application will have its own Tracer instance.
The Tracer must be configurable outside of the application to match the distributed tracing environment where the application is deployed. For example, it should be possible to take the exact same application and deploy it to an environment where Zipkin is in use, and to deploy the application without modification to a different environment where Jaeger is in use, and the application should report Spans correctly in either environment.

==== SpanContext extraction
When a request arrives at a JAX-RS endpoint, an attempt is made to use the configured Tracer to extract a SpanContext from the arriving request. If a SpanContext is extracted, it is used as the parent for the new Span that is created for the endpoint.

==== Span creation for inbound requests
When a request arrives at a JAX-RS endpoint, a new Span is created. The new Span will be a child of the SpanContext extracted from the incoming request, if the extracted SpanContext exists.

[[server-span-name]]
===== Server Span name
The default operation name of the new Span for the incoming request is
```
<HTTP method>:<package name>.<Class name>.<method name>
```

===== Server Span tags
Spans created for incoming requests will have the following tags added by default:

* Tags.SPAN_KIND = Tags.SPAN_KIND_SERVER
* Tags.HTTP_METHOD
* Tags.HTTP_URL
* Tags.HTTP_STATUS
* Tags.ERROR (if true)

Tags.SPAN_KIND has to be specified at Span start time.

==== Span creation and injection for outbound requests
When a request is sent from a JAX-RS javax.ws.rs.client.Client, a new Span is created and its SpanContext is injected in the outbound request for propagation downstream. The new Span will be a child of the active Span if an active Span exists. The new Span will be finished when the outbound request is completed.

===== Client Span name
The default operation name of the new Span for the outgoing request is
```
<HTTP method>
```

===== Client Span tags
Spans created for outgoing requests will have the following tags added by default:

* Tags.SPAN_KIND = Tags.SPAN_KIND_CLIENT
* Tags.HTTP_METHOD
* Tags.HTTP_URL
* Tags.HTTP_STATUS
* Tags.ERROR (if true)

Tags.SPAN_KIND has to be specified at Span start time.

=== Enabling explicit distributed tracing code instrumentation

An annotation is provided to define explicit Span creation.

* @Traced: Specify a class or method to be traced.

==== The @Traced annotation

The @Traced annotation, applies to a Class or a method. When applied to a Class, the @Traced annotation is applied to all methods of the Class.
The annotation starts a Span at the beginning of the method, and finishes the Span at the end of the method.

The @Traced annotation has two optional arguments.

* value=[true|false]. Defaults to true. If @Traced is specified at the Class level, then @Traced(false) is used to annotate specific methods to disable creation of a Span for those methods. By default all JAX-RS endpoint methods are traced. To disable Span creation of a specific JAX-RS endpoint, the @Traced(false) annotation can be used.
+
Even when the @Traced(false) annotation is used for a JAX-RS endpoint method, the upstream SpanContext will still be extracted if it exists. The extracted SpanContext will be used to define a current Span.

* operationName=&lt;Name for the Span&gt;. Default is "". If the @Traced annotation finds the operationName as "", the default operationName is used (see <<server-span-name>>).

Example:
[source,java]
----
@InterceptorBinding
@Target({ TYPE, METHOD })
@Retention(RUNTIME)
public @interface Traced {
    @Nonbinding
    boolean value() default true;
    @Nonbinding
    String operationName() default "";
}
----

==== io.opentracing.Tracer access
This proposal also specifies that the underlying opentracing.io Tracer object
configured instance is available for developer use. The microprofile.io
implementation will make the configured Tracer available with CDI injection.

The configured Tracer object is accessed by injecting the Tracer class that has been configured for the particular application for this environment. Each application gets a different Tracer instance.

Example:

[source,java]
----
@Inject
io.opentracing.Tracer configuredTracer;
----

Access to the configured Tracer gives full access to opentracing.io functions.

The Tracer object enables support for the more complex tracing requirements, such as when a Span is started in one method, and finished in another.

Access to the Tracer also allows tags, logs and baggage to be added to Spans with, for example:
[source,java]
----
configuredTracer.activeSpan().setTag(...);
configuredTracer.activeSpan().log(...);
configuredTracer.activeSpan().setBaggage(...);
----

## Impact on existing code
@Trace annotations can be added to existing code. A configured Tracer object can be accessed with CDI injection.

## Alternatives considered
Current mechanisms require a decision at development time about the distributed trace system that will be used.
This feature allows the decision to be made at the operational environment level.
